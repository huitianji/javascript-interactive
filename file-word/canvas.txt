canvas 默认是w->300,h->150  ;
绘图环境

getContext("2d");//webgl   3G 绘图

fillStyle :填充颜色
strokeStyle:填充边框线
lineWidth :边框线宽度

fillRect(l,t,w,h);绘制矩形
strokeRect(); 带边框线的矩形

边界绘制：

    lineJoin   边界链接点样式
           --》miter(默认)   round(圆角)  bevel(斜角)
    lineCap   端点样式------一条直线两个端点
          --->butt(默认)   round(圆角)    square(高度多出为宽一半的值)



绘图路径:
    beginPath :开始绘制路径
    closePath:结束绘制路径
    moveTo(l,t)   :移动到绘制的新目标点
    lineTo   :新目标点



绘图路径2：
    stroke :画线，默认黑色
    fill: 填充默认黑色
    rect: 矩形区域   //rect(l,t,w,h)
    clearRect: 删除一个画布的矩形区域  clearRect(x,y,w,h) 例： oCanvas.clearRect(0,0,oCas.width,oCas.height)
              -----oCanvas.clearRect(-150,-150,oCas.width,oCas.height);处理方法
    save: 保存路径
    restore : 恢复路径


顺序：先背景填充 后 边框线填充
{
   oCanvas.fill();// 第一步
   oCanvas.stroke();//第二步
}


--------------------------------
绘制圆
arc(x,y,半径，起始弧度，结束弧度，旋转方向);
    --x,y 起始位置
    --弧度与角度的关系：弧度=角度*Math.PI/180
    --旋转方向：顺时针（默认：false）\逆时针（true）
    --例子：用arc去画个钟表

绘制其他曲线
arcTo(x1,y1,x2,y2,r);
    --第一组坐标   第二组坐标  半径
quadraticCurveTo(dx,dy,x1,y1);
    --贝塞尔曲线:第一组控制点   \  第二组结束坐标
bezierCurveTo(dx1,dy1,dx2,dy2,x1,y1);
    --贝塞尔曲线：第一组控制点  第二组控制点   第三组结束坐标

---------------------------------

变换
    translate(x,y)
        --偏移：从起始点为基准点，移动当前坐标位置s
    rotate
        --旋转：参数为弧度
        --例子：旋转的小方块
    scale
        --缩放例子：旋转加缩放的小方块
        --scale(x,y);

----------->>>先旋转再画图形。。1.rotate(弧度)  -》xx.fillRect();


插入图片
    等图片加载完成，再执行canvas操作
        --图片预加载：在onload中调用方法
        --drawImage(oImg,x,y,w,h);
        ---oImg :当前图片  x,y坐标  wh宽高
        --微博的图片旋转效果

设置背景
    createPattern(oImg,平铺方式);
      --2参数: repeat,repeat-x,repeat-y,no-repeat

渐变
    createLinearGradient(x1,y1,x2,y2);
    --线性渐变
    --第一组参数：起始坐标  第二组参数：结束坐标
    --addColorStop(位置，颜色)  添加渐变点
    --------------位置 0---1之间

    createRadialGradient(x1,y1,r1,x2,y2,r2);
    --放射性渐变
    --参数：第一个圆的坐标和半径，第二个圆的坐标和半径
    --从中间往四周渐变

文本
    strokeText(文字，x,y);
         --文字边框
    fillText(文字，x,y);
         --文字填充
    font
         --文字大小：“60px impact”；
         -------------文字大小  文字样式
     textAlign
        --默认是start 跟left一样的效果  end right center

    textBaseline
        --文字上下的位置方式默认：alphabetic

文本2
    measureText();
        --measureText(str).width 只有宽度，没有高度

阴影
    shadowOffsetX、shadowOffsetY
        -- X轴偏移   Y轴偏移
    shadowBlur
        --高斯模糊值
    shadowColor
        --阴影颜色


--------------------------------------------
像素
    getImageData(x,y,w,h)
        --获取图形数据
    putImageData(获取图形,x,y);
        --设置新的图像数据
    属性：
        --width:一行的像素个数
        --height:一列的像素个数
        --data: 一个数组，包含每个像素的rgba四个值,注意每个值都在0~255之间的整数
像素_2
    createImageData(w,h)
        --生成新的像素矩阵,初始值是全透明的黑色即：（0,0,0）
        --例子：像素显字
    获取和设置指定坐标
        -- getXY \ setXY
    图片的像素操作
        --必须是同源下
        --例子：反色，倒影，渐变等
        --马赛克效果


-------------------------------------------------------
合成
    全局阿尔法值
        --globalAlpha
    覆盖合成
        --源，新的图形
        --目标，已经绘制过的图形
        --globalCompositeOperation 属性
        >> source-over  destination-over  source-atop
        >> destination-atop source-in destination-in
        >> source-out destination-out  lighter
        >> copy xor

将画布导出为图像
    toDataURL
        --火狐右键可以直接导出成图片
事件操作
    isPointInPath(x,y)
        --是否在点击范围之内
        --iCanvaScript(canvas中的jquery)
        --http://jcscript.com/




////////////////////

http://jcscript.com/documentation/




















